const fs = require('fs');
const token = process.env.TRANSIFEX_TOKEN;
var org = process.env.TRANSIFEX_ORG;
var project = process.env.TRANSIFEX_PROJECT;
var resource = process.env.TRANSIFEX_RESOURCE;

const options = {
    method: 'GET',
    headers: {
        accept: 'application/vnd.api+json',
        authorization: `Bearer ${token}`
    }
};

const updateLocales = async () => {
    return new Promise((res, rej) => {
        fetch(`https://rest.api.transifex.com/projects/o%3A${org}%3Ap%3A${project}/languages`, options)
            .then(response => response.json())
            .then(response => {
                const locales = [];
                const languages = response.data.map(lang => ({
                    name: lang.attributes.name,
                    code: lang.attributes.code
                }));
                languages.forEach(lang => {
                    locales.push(lang.code);
                });
                // Transifex doesn't let you download your source file
                languages.push({
                    name: 'English',
                    code: 'en'
                });
                const localesContent = `//AUTOMATICALLY GENERATED BY update_locales.js\nmodule.exports = ${JSON.stringify(languages)};`;
                fs.writeFileSync('./translations/locales.js', localesContent);
                res(locales);
            })
            .catch(err => {
                console.error(err)
                rej(err);
            });
        });
}

const downloadTranslation = (lang) => {
    const postOptions = {
        method: 'POST',
        headers: {
            accept: 'application/vnd.api+json',
            'content-type': 'application/vnd.api+json',
            authorization: `Bearer ${token}`
        },
        body: `{"data":{"attributes":{"callback_url":null,"content_encoding":"text","file_type":"default","mode":"default","pseudo":false},"relationships":{"language":{"data":{"type":"languages","id":"l:${lang}"}},"resource":{"data":{"type":"resources","id":"o:${org}:p:${project}:r:${resource}"}}},"type":"resource_translations_async_downloads"}}`
    };


    fetch('https://rest.api.transifex.com/resource_translations_async_downloads', postOptions)
        .then(response => response.json())
        .then(response => {
            const id = response.data.id;
            fetch(`https://rest.api.transifex.com/resource_translations_async_downloads/${id}`, options)
                .then(response => response.json())
                .then(response => {
                    const filePath = `./translations/locales/${lang}.json`;
                    fs.writeFileSync(filePath, JSON.stringify(response));
                })
                .catch(err => console.error(err));
        })
        .catch(err => console.error(err));
}
if (token, org, project, resource) {
    updateLocales().then((locales) => {
        locales.forEach(locale => {
            downloadTranslation(locale);
        });
    })
} else {
    throw new Error('Missing environment variables');
}